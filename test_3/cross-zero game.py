# 5.6. Итоговое практическое задание
# Игра крестики-нолики
# *****************************************

# Создадим функцию вывода в консоль информации о релизе игры:
def relise():
    print('  ИГРА Крестики-нолики:')
    print('------версия 1.5--------')
    print('1. Добавлено функциональное меню \n'
          '2. Добавлен запрет на первый ход в центр игрового поля \n'
          '3. Функция проверки выигрышной комбинации начинает работать только на пятом ходу \n'
          '4. Отредактировано содержание правил игры\n'
          '5. Добавлена механика повторной игры')
    print(
        '*************************************************************************************************************')
    if input("Для возврата в главное меню нажмите клавишу Enter ") == "":
        clear_console()
        start_menu()
# Создадим функцию, выводящую на экран правила игры
def rules():
    print('*****************************************************************************************************************')
    print('ИГРА Крестики-нолики:')
    print('Крестики-нолики — логическая игра между двумя противниками на квадратном поле 3 на 3 клетки. \n'
          'Один из игроков играет «крестиками», второй — «ноликами». \n'
          'Игроки по очереди ставят на свободные клетки поля 3х3 знаки (один всегда крестики, другой всегда нолики). \n'
          'Первый, выстроивший в ряд 3 своих фигур по вертикали, горизонтали или диагонали, выигрывает. \n'
          'Первый ход делает игрок, ставящий крестики.\n'
          'Первый ход в центр недопустим!!! \n')
    print('*************************************************************************************************************')
    if input("Для возврата в главное меню нажмите клавишу Enter ") == "":
        clear_console()
        start_menu()

# Создадим функцию стартового меню для игрока
def start_menu():

    print('\n  '
          'ИГРА Крестики-нолики\n'
          '')
    print('------версия 1.4--------')
    print('')
    print('Для начала игры нажмите - "Y"')
    print('Для просмотра правил игры нажмите - "H"')
    print('Для просмотра информации о релизе нажмите - "I"')
    while True:
        ch = ['y', 'h', 'i', 'н', 'р', 'ш']
        choise = input('Ваш выбор: ').lower()

        print(choise)
        if choise not in ch:
            print('Неверный ввод, введите "Y", "H", "I"')
            continue
        if choise in ("y", 'н'):
            clear_console()
            start_game()
            break
        if choise in ('h', 'р'):
            clear_console()
            rules()
            break
        if choise in ('i', 'ш'):
            clear_console()
            relise()
            break
# Реализуем модуль ввода данных, включающий в себя проверки корректности введенных данных
def input_data():
    while True: # реализуем бесконечный цикл для проверки введенных Игроком данных
        x = input('введите номер столбца (1, 2 или 3): ')
        y = input('введите номер строки (1, 2 или 3): ')
        if not(x.isdigit()) or not(y.isdigit()):
            print("----------Ошибка. Введите числа----------")
            continue
        x, y = int(x), int(y)
        if x < 1 or x > 3 or y < 1 or y > 3:
            print("----------Ошибка. Координаты вне диапазона игрового поля, повторите ввод данных----------")
            continue

        if field[y][x] != '-':
            print('----------Данная клетка уже занята, повторите ввод данных----------')
            continue
        return x, y
# show() #

# Реализуем функцию проверки наличия выигрышных комбинаций check_win
def check_win():
    win_position = (((1, 1), (1, 2), (1, 3)), ((2, 1), (2, 2), (2, 3)),
                    ((3, 1), (3, 2), (3, 3)), ((1, 1), (2, 1), (3, 1)),
                    ((1, 2), (2, 2), (3, 2)), ((1, 3), (2, 3), (3, 3)),
                    ((1, 1), (2, 2), (3, 3)), ((3, 1), (2, 2), (1, 3)))
    for A in win_position:
        check = []
        for B in A:
            check.append(field[B[0]][B[1]])
        if check == ['X', 'X', 'X']:
            print('Победили Крестики')
            return True
        if check == ['0', '0', '0']:
            print('Победили Нолики')
            return True
    return False
# Старый алгоритм проверки выигрышных комбинаций
def check_win1():
    # проверка строк
    for y in range(1,4):
        check_list= []
        for x in range(1,4):
            check_list.append(field[y][x])
        if check_list == ['X','X','X']:
            print('!------Победили Крестики------!')
            return True
        if check_list == ['0', '0', '0']:
            print('!------Победили Нолики------!')
            return True

    # проверка столбцов
    for y in range(1,4):
        check_list= []
        for x in range(1,4):
            check_list.append(field[x][y])
        if check_list == ['X','X','X']:
            print('!-------Победили Крестики------!')
            return True
        if check_list == ['0', '0', '0']:
            print('!------Победили Нолики------!')
            return True

    # проверка прямой диагонали
    check_list= []
    for x in range(1,4):
        check_list.append(field[x][x])
        if check_list == ['X','X','X']:
            print('!------Победили Крестики------!')
            return True
        if check_list == ['0', '0', '0']:
            print('!------Победили Нолики-------!')
            return True
    # проверка обратной диагонали
    check_list= []
    for x in range(1,4):
        check_list.append(field[x][4-x])
        if check_list == ['X','X','X']:
            print('!-------Победили Крестики-------!')
            return True
        if check_list == ['0', '0', '0']:
            print('!-------Победили Нолики-------!')
            return True
    return False
# Типа функция очистки консоли
def clear_console():
    print("\n" * 50)
# Создадим функцию отрисовки игрового поля
def show():
    for row in field:
        for x in row:
            print(x,'|', end=" ")
        # print("")
        print('\n---------------')# Печатаем разделитель между строками
# Реализуем игровой алгоритм поочерёдного хода с помощью цикла for
def start_game():
    show()
    for i in range(1, 10):
        if i % 2 == 1:  # Определяем очередность хода
            print(f'Ход-{i}: Поставьте Крестик')
            x, y = input_data()
            if i == 1 and x == 2 and y == 2:
                print('\n'
                      'Ходить первым ходом в центр нечестно, попробуйте еще раз')
                x, y = input_data()
            field[y][x] = 'X'
        else:
            print(f'Ход-{i}: Поставьте Нолик')
            x, y = input_data()
            field[y][x] = '0'
        show()
        if i >= 5 and check_win():
            break
        elif i == 9 and not check_win():
            print('\n'
                  '!-------НИЧЬЯ--------!')


#Определим стартовое значение игрового поля списком field

field = [[" ", "1", '2', "3"],
        ["1", "-", '-', "-"],
        ["2", "-", '-', "-"],
        ["3", "-", '-', "-"]]

# Запустим игру, вызвав стартовое меню
start_menu()
# Создадим цикл, позволяющий пользователю сыграть неограниченное количество партий
while True:
    print()
    if input('Хотите сыграть еще раз?\n'
            'Если да, нажмите "Y", в противном случае нажмите любую клавишу: ').lower() in ('y','н'):
        print('\n')
        field = [[" ", "1", '2', "3"],
                ["1", "-", '-', "-"],
                ["2", "-", '-', "-"],
                ["3", "-", '-', "-"]]
        start_game()
        continue
    else:
        print('\n'
          '    Игра окончена!    ')
        break

